{"version":3,"sources":["Api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getAllTodos","a","fetch","response","json","Error","getUser","userId","user","TodoList","state","todos","query","handleButtonFilter","event","setState","target","value","getFiltredTodos","status","filter","todo","completed","getFilteredData","selectorStatus","props","filterTodos","lowerCaseQuery","toLowerCase","title","includes","handleRandomizer","randomOrder","sort","Math","random","this","handleSelectorStatus","selectedUserId","filteredTodoList","className","type","id","placeholder","onChange","onClick","map","classNames","htmlFor","checked","readOnly","React","Component","CurrentUser","name","email","phone","error","loadData","prev","getSelectedUserId","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c5cf25f.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getAllTodos(): Promise<Todo[]> {\n  try {\n    const response = await fetch(`${BASE_URL}/todos`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error('Error');\n  }\n}\n\nexport const getUser = async (userId: number) => {\n  const user = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return user.json();\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport { getAllTodos } from '../../Api/api';\n\ntype Props = {\n  selectedUserId: (id: number) => void;\n  handleSelectorStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectorStatus: number;\n};\n\ntype State = {\n  todos: Todo[];\n  query: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  handleButtonFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  getFiltredTodos = (todos: Todo[], status: boolean) => {\n    return todos.filter(todo => todo.completed === status);\n  };\n\n  getFilteredData = () => {\n    const { todos, query } = this.state;\n    const { selectorStatus } = this.props;\n\n    if (query) {\n      const filterTodos = todos.filter((todo) => {\n        const lowerCaseQuery = query.toLowerCase();\n\n        return (\n          todo.title.toLowerCase().includes(lowerCaseQuery)\n        );\n      });\n\n      if (selectorStatus === 1) {\n        return this.getFiltredTodos(filterTodos, false);\n      }\n\n      if (selectorStatus === 2) {\n        return this.getFiltredTodos(filterTodos, true);\n      }\n\n      return filterTodos;\n    }\n\n    switch (selectorStatus) {\n      case 1:\n        return this.getFiltredTodos(todos, false);\n      case 2:\n        return this.getFiltredTodos(todos, true);\n      default:\n        return todos;\n    }\n  };\n\n  handleRandomizer = () => {\n    const { todos } = this.state;\n    const randomOrder = todos.sort(() => Math.random() - 0.5);\n\n    this.setState({ todos: randomOrder });\n  };\n\n  render() {\n    const { query } = this.state;\n    const { handleSelectorStatus, selectedUserId, selectorStatus } = this.props;\n    const filteredTodoList = this.getFilteredData();\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"input\"\n          placeholder=\"Type search word\"\n          value={query}\n          onChange={this.handleButtonFilter}\n        />\n\n        <select\n          className=\"select\"\n          value={selectorStatus}\n          onChange={handleSelectorStatus}\n        >\n          <option value=\"0\">all</option>\n          <option className=\"select select--active\" value=\"1\">active</option>\n          <option className=\"select select--completed\" value=\"2\">completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          onClick={this.handleRandomizer}\n        >\n          Randomize\n        </button>\n\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodoList.map(todo => (\n              <li key={todo.id} className={classNames('TodoList__item', { 'TodoList__item--unchecked': !todo.completed }, { 'TodoList__item--checked': todo.completed })}>\n                <label htmlFor={`Todo-${todo.id}`}>\n                  <input\n                    id={`Todo-${todo.id}`}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectedUserId(todo.userId)}\n                >\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../Api/api';\n\ntype Props = {\n  selectedUserId: number;\n  getSelectedUserId: (id: number) => void;\n};\n\ntype State = {\n  user: User;\n  error: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n    error: false,\n  };\n\n  async componentDidMount() {\n    this.loadData();\n  }\n\n  async componentDidUpdate(prev: Props) {\n    if (prev.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    try {\n      const user = await getUser(this.props.selectedUserId);\n\n      this.setState({ user, error: false });\n    } catch (error) {\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const { user, error } = this.state;\n    const { selectedUserId, getSelectedUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {!error ? (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        ) : <p>User not found...</p>}\n        <button\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          type=\"button\"\n          onClick={() => getSelectedUserId(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport './styles/general.scss';\nimport './App.scss';\n\ninterface State {\n  selectedUserId: number;\n  selectorStatus: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    selectorStatus: 0,\n  };\n\n  getSelectedUserId = (id: number) => {\n    this.setState((\n      { selectedUserId: id }\n    ));\n  };\n\n  handleSelectorStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectorStatus: +event.target.value,\n    });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      selectorStatus,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={this.getSelectedUserId}\n            handleSelectorStatus={this.handleSelectorStatus}\n            selectorStatus={selectorStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                getSelectedUserId={this.getSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}