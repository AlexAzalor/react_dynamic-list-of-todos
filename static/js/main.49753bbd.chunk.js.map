{"version":3,"sources":["components/TodoList/TodoList.tsx","Api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","handleButtonFilter","query","selectorStatus","handleSelectorStatus","randomizer","className","type","id","placeholder","value","onChange","onClick","map","todo","classNames","completed","htmlFor","checked","readOnly","title","userId","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","name","email","phone","this","loadData","prev","props","a","setState","getSelectedUserId","React","Component","App","event","target","getFilteredData","filter","lowerCaseQuery","toLowerCase","includes","handleRandomizer","randomOrder","sort","Math","random","filteredTodoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49753bbd.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: (id: number) => void;\n  handleButtonFilter: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  query: string;\n  handleSelectorStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectorStatus: number;\n  randomizer: () => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  handleButtonFilter,\n  query,\n  selectorStatus,\n  handleSelectorStatus,\n  randomizer,\n}) => (\n\n  <div className=\"TodoList\">\n    <input\n      type=\"text\"\n      id=\"search-query\"\n      className=\"input\"\n      placeholder=\"Type search word\"\n      value={query}\n      onChange={handleButtonFilter}\n    />\n\n    <select\n      value={selectorStatus}\n      onChange={handleSelectorStatus}\n    >\n      <option value=\"0\">all</option>\n      <option value=\"1\">active</option>\n      <option value=\"2\">completed</option>\n    </select>\n\n    <button\n      type=\"button\"\n      onClick={randomizer}\n    >\n      Randomize\n    </button>\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li key={todo.id} className={classNames('TodoList__item', { 'TodoList__item--unchecked': !todo.completed }, { 'TodoList__item--checked': todo.completed })}>\n            <label htmlFor=\"label\">\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectedUserId(todo.userId)}\n            >\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction request(url: string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getAllUsers = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getAllUsers } from '../../Api/api';\n\ntype Props = {\n  selectedUserId: number;\n  getSelectedUserId: (id: number) => void;\n};\n\ntype State = {\n  user: User;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prev: Props) {\n    if (prev.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getAllUsers(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectedUserId, getSelectedUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        )}\n        <button\n          type=\"button\"\n          onClick={() => getSelectedUserId(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './Api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  query: string;\n  selectorStatus: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    query: '',\n    todos: [],\n    selectorStatus: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  getSelectedUserId = (id: number) => {\n    this.setState((\n      { selectedUserId: id }\n    ));\n  };\n\n  handleButtonFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  getFilteredData = () => {\n    const { todos, query, selectorStatus } = this.state;\n\n    if (query) {\n      const filterTodos = todos.filter((todo) => {\n        const lowerCaseQuery = query.toLowerCase();\n\n        return (\n          todo.title.toLowerCase().includes(lowerCaseQuery)\n        );\n      });\n\n      return filterTodos;\n    }\n\n    switch (selectorStatus) {\n      case 1:\n        return todos.filter(todo => todo.completed === false);\n      case 2:\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  };\n\n  handleSelectorStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectorStatus: +event.target.value,\n    });\n  };\n\n  handleRandomizer = () => {\n    const { todos } = this.state;\n    const randomOrder = todos.sort(() => Math.random() - 0.5);\n\n    this.setState({ todos: randomOrder });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      query,\n      selectorStatus,\n    } = this.state;\n    const filteredTodoList = this.getFilteredData();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodoList}\n            selectedUserId={this.getSelectedUserId}\n            handleButtonFilter={this.handleButtonFilter}\n            query={query}\n            handleSelectorStatus={this.handleSelectorStatus}\n            selectorStatus={selectorStatus}\n            randomizer={this.handleRandomizer}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                getSelectedUserId={this.getSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}