{"version":3,"sources":["components/TodoList/TodoList.tsx","Api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","filter","query","selectorStatus","filterStatus","random","className","type","id","placeholder","value","onChange","onClick","map","todo","classNames","completed","htmlFor","checked","readOnly","title","userId","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","name","email","phone","this","loadData","prev","props","a","usr","setState","functSelectUser","React","Component","App","getSelectedUserId","handleButtonFilter","event","target","getFilteredData","e","lowerCaseQuery","toLowerCase","includes","handleStatusFilter","handleRandomize","sort","Math","tod","filteredList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.806128b5.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: (id: number) => void;\n  filter: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  query: string;\n  filterStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectorStatus: number;\n  random: () => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  filter,\n  query,\n  selectorStatus,\n  filterStatus,\n  random,\n}) => (\n\n  <div className=\"TodoList\">\n    <input\n      type=\"text\"\n      id=\"search-query\"\n      className=\"input\"\n      placeholder=\"Type search word\"\n      value={query}\n      onChange={filter}\n    />\n\n    <select\n      value={selectorStatus}\n      onChange={filterStatus}\n    >\n      <option value=\"0\">all</option>\n      <option value=\"1\">active</option>\n      <option value=\"2\">completed</option>\n    </select>\n\n    <button\n      type=\"button\"\n      onClick={random}\n    >\n      Randomize\n    </button>\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li key={todo.id} className={classNames('TodoList__item', { 'TodoList__item--unchecked': !todo.completed }, { 'TodoList__item--checked': todo.completed })}>\n            <label htmlFor=\"label\">\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectedUserId(todo.userId)}\n            >\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction request(url: string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getAllTodos = () => {\n  return request('/todos');\n};\n\nexport const getAllUsers = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getAllUsers } from '../../Api/api';\n\ntype Props = {\n  selectedUserId: number;\n  functSelectUser: (id: number) => void;\n};\n\ntype State = {\n  user: User;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prev: Props) {\n    if (prev.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const usr = await getAllUsers(this.props.selectedUserId);\n\n    this.setState({ user: usr });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectedUserId, functSelectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        )}\n        <button\n          type=\"button\"\n          onClick={() => functSelectUser(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getAllTodos } from './Api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  query: string;\n  selectorStatus: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    query: '',\n    todos: [],\n    selectorStatus: 0,\n  };\n\n  async componentDidMount() {\n    const tod = await getAllTodos();\n\n    this.setState({ todos: tod });\n  }\n\n  getSelectedUserId = (id: number) => {\n    this.setState((\n      { selectedUserId: id }\n    ));\n  };\n\n  handleButtonFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  getFilteredData = () => {\n    if (this.state.query) {\n      const filterTodos = this.state.todos.filter((e) => {\n        const lowerCaseQuery = this.state.query.toLowerCase();\n\n        return (\n          e.title.toLowerCase().includes(lowerCaseQuery)\n        );\n      });\n\n      return filterTodos;\n    }\n\n    if (this.state.selectorStatus === 1) {\n      const sort = this.state.todos.filter(todo => todo.completed === false);\n\n      return sort;\n    }\n\n    if (this.state.selectorStatus === 2) {\n      const sort = this.state.todos.filter(todo => todo.completed === true);\n\n      return sort;\n    }\n\n    return this.state.todos;\n  };\n\n  handleStatusFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectorStatus: +event.target.value,\n    });\n  };\n\n  handleRandomize = () => {\n    const { todos } = this.state;\n\n    const random = todos.sort(() => Math.random() - 0.5);\n\n    this.setState({ todos: random });\n  };\n\n  render() {\n    const {\n      selectedUserId, query, selectorStatus,\n    } = this.state;\n    const filteredList = this.getFilteredData();\n\n    if (!filteredList) {\n      return 'Where user?';\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredList}\n            selectedUserId={this.getSelectedUserId}\n            filter={this.handleButtonFilter}\n            query={query}\n            filterStatus={this.handleStatusFilter}\n            selectorStatus={selectorStatus}\n            random={this.handleRandomize}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                functSelectUser={this.getSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}