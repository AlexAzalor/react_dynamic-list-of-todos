{"version":3,"sources":["components/TodoList/TodoList.tsx","Api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","handleButtonFilter","query","selectorStatus","handleSelectorStatus","randomizer","className","type","id","placeholder","value","onChange","onClick","map","todo","classNames","completed","htmlFor","checked","readOnly","title","userId","BASE_URL","getAllTodos","a","fetch","response","json","Error","getUser","user","CurrentUser","state","name","email","phone","error","this","loadData","prev","props","setState","getSelectedUserId","React","Component","App","event","target","getFiltredTodos","status","filter","getFilteredData","filterTodos","lowerCaseQuery","toLowerCase","includes","handleRandomizer","randomOrder","sort","Math","random","filteredTodoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fff3cd34.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: (id: number) => void;\n  handleButtonFilter: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  query: string;\n  handleSelectorStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectorStatus: number;\n  randomizer: () => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  handleButtonFilter,\n  query,\n  selectorStatus,\n  handleSelectorStatus,\n  randomizer,\n}) => (\n\n  <div className=\"TodoList\">\n    <input\n      type=\"text\"\n      id=\"search-query\"\n      className=\"input\"\n      placeholder=\"Type search word\"\n      value={query}\n      onChange={handleButtonFilter}\n    />\n\n    <select\n      value={selectorStatus}\n      onChange={handleSelectorStatus}\n    >\n      <option value=\"0\">all</option>\n      <option value=\"1\">active</option>\n      <option value=\"2\">completed</option>\n    </select>\n\n    <button\n      type=\"button\"\n      onClick={randomizer}\n    >\n      Randomize\n    </button>\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li key={todo.id} className={classNames('TodoList__item', { 'TodoList__item--unchecked': !todo.completed }, { 'TodoList__item--checked': todo.completed })}>\n            <label htmlFor=\"label\">\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectedUserId(todo.userId)}\n            >\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getAllTodos(): Promise<Todo[]> {\n  try {\n    const response = await fetch(`${BASE_URL}/todos`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error('Error');\n  }\n}\n\nexport const getUser = async (userId: number) => {\n  const user = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return user.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../Api/api';\n\ntype Props = {\n  selectedUserId: number;\n  getSelectedUserId: (id: number) => void;\n};\n\ntype State = {\n  user: User;\n  error: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n    error: false,\n  };\n\n  async componentDidMount() {\n    this.loadData();\n  }\n\n  async componentDidUpdate(prev: Props) {\n    if (prev.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    try {\n      const user = await getUser(this.props.selectedUserId);\n\n      this.setState({ user, error: false });\n    } catch (error) {\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const { user, error } = this.state;\n    const { selectedUserId, getSelectedUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {!error ? (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUserId}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        ) : <p>User not faund...</p>}\n        <button\n          className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n        \"\n          type=\"button\"\n          onClick={() => getSelectedUserId(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './Api/api';\n\nimport './styles/general.scss';\nimport './App.scss';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  query: string;\n  selectorStatus: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    query: '',\n    todos: [],\n    selectorStatus: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  getSelectedUserId = (id: number) => {\n    this.setState((\n      { selectedUserId: id }\n    ));\n  };\n\n  handleButtonFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  getFiltredTodos = (todos: Todo[], status: boolean) => {\n    return todos.filter(todo => todo.completed === status);\n  };\n\n  getFilteredData = () => {\n    const { todos, query, selectorStatus } = this.state;\n\n    if (query) {\n      const filterTodos = todos.filter((todo) => {\n        const lowerCaseQuery = query.toLowerCase();\n\n        return (\n          todo.title.toLowerCase().includes(lowerCaseQuery)\n        );\n      });\n\n      if (selectorStatus === 1) {\n        return this.getFiltredTodos(filterTodos, false);\n      }\n\n      if (selectorStatus === 2) {\n        return this.getFiltredTodos(filterTodos, true);\n      }\n\n      return filterTodos;\n    }\n\n    switch (selectorStatus) {\n      case 1:\n        return this.getFiltredTodos(todos, false);\n      case 2:\n        return this.getFiltredTodos(todos, true);\n      default:\n        return todos;\n    }\n  };\n\n  handleSelectorStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectorStatus: +event.target.value,\n    });\n  };\n\n  handleRandomizer = () => {\n    const { todos } = this.state;\n    const randomOrder = todos.sort(() => Math.random() - 0.5);\n\n    this.setState({ todos: randomOrder });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      query,\n      selectorStatus,\n    } = this.state;\n    const filteredTodoList = this.getFilteredData();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodoList}\n            selectedUserId={this.getSelectedUserId}\n            handleButtonFilter={this.handleButtonFilter}\n            query={query}\n            handleSelectorStatus={this.handleSelectorStatus}\n            selectorStatus={selectorStatus}\n            randomizer={this.handleRandomizer}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                getSelectedUserId={this.getSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}